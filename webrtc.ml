open Js_of_ocaml

class type _RTCPeerConnection =
  object

    (** The read-only RTCPeerConnection property canTrickleIceCandidates
        returns a Boolean which indicates whether or not the remote peer
        can accept trickled ICE candidates. *)
    method canTrickleIceCandidates : bool Js.t Js.readonly_prop

    (** The read-only connectionState property of the RTCPeerConnection
        interface indicates the current state of the peer connection by
        returning one of the string values specified by the enum
        RTCPeerConnectionState. *)
    method connectionState : Js.js_string Js.t Js.readonly_prop

    (** The read-only property RTCPeerConnection.currentLocalDescription
        returns an RTCSessionDescription object describing the local end
        of the connection as it was most recently successfully negotiated
        since the last time the  RTCPeerConnection finished negotiating and
        connecting to a remote peer. Also included is a list of any ICE
        candidates that may already have been generated by the ICE agent since
        the offer or answer represented by the description was first
        instantiated. *)
    method currentLocalDescription : _RTCSessionDescription Js.t Js.opt Js.readonly_prop

    (** The read-only property RTCPeerConnection.currentRemoteDescription
        returns an RTCSessionDescription object describing the remote end
        of the connection as it was most recently successfully negotiated
        since the last time the RTCPeerConnection finished negotiating and
        connecting to a remote peer. Also included is a list of any ICE
        candidates that may already have been generated by the ICE agent since
        the offer or answer represented by the description was first
        instantiated. *)
    method currentRemoteDescription : _RTCSessionDescription Js.t Js.opt Js.readonly_prop

    (** The read-only property RTCPeerConnection.defaultIceServers returns
        an array of objects based on the RTCIceServer dictionary, which
        indicates what, if any, ICE servers the browser will use by default
        if none are provided to the RTCPeerConnection in its RTCConfiguration.
        However, browsers are not required to provide any default ICE servers
        at all. *)
    method defaultIceServers : _RTCIceServer Js.t Js.js_array Js.t Js.readonly_prop

    (** The read-only property RTCPeerConnection.iceConnectionState returns
        an enum of type RTCIceConnectionState which state of the ICE agent
        associated with the RTCPeerConnection. *)
    method iceConnectionState : Js.js_string Js.t Js.readonly_prop

    (** The read-only property RTCPeerConnection.iceGatheringState returns
        an enum of type RTCIceGatheringState that describes connection's ICE
        gathering state. This lets you detect, for example, when collection
        of ICE candidates has finished. *)
    method iceGatheringState : Js.js_string Js.t Js.readonly_prop

    (** The read-only property RTCPeerConnection.localDescription returns an
        RTCSessionDescription describing the session for the local end of the
        connection. If it has not yet been set, this is null. *)
    method localDescription : _RTCSessionDescription Js.t Js.opt Js.readonly_prop

    (* TODO add type *)
    (** The read-only property RTCPeerConnection.peerIdentity returns
        an RTCIdentityAssertion, containing a DOMString once set and verified.
        If no peer has yet been set and verified, this property will return
        null. Once set, via the appropriate method, it can't be changed. *)
    method peerIdentity : 'a Js.t Js.opt Js.readonly_prop

    (** The read-only property RTCPeerConnection.pendingLocalDescription
        returns an RTCSessionDescription object describing a pending
        configuration change for the local end of the connection.
        This does not describe the connection as it currently stands, but as
        it may exist in the near future.
        Use RTCPeerConnection.currentLocalDescription or
        RTCPeerConnection.localDescription to get the current state of
        the endpoint. For details on the difference, see Pending and current
        descriptions in WebRTC connectivity. *)
    method pendingLocalDescription : _RTCSessionDescription Js.t Js.opt Js.readonly_prop

    (** The read-only property RTCPeerConnection.pendingRemoteDescription
        returns an RTCSessionDescription object describing a pending
        configuration change for the remote end of the connection.
        This does not describe the connection as it currently stands, but as
        it may exist in the near future.
        Use RTCPeerConnection.currentRemoteDescription or
        RTCPeerConnection.remoteDescription to get the current session
        description for the remote endpoint. For details on the difference, see
        Pending and current descriptions in WebRTC connectivity. *)
    method pendingRemoteDescription : _RTCSessionDescription Js.t Js.opt Js.readonly_prop

    (** The read-only property RTCPeerConnection.remoteDescription returns
        a RTCSessionDescription describing the session (which includes
        configuration and media information) for the remote end of the
        connection. If this hasn't been set yet, this is null. *)
    method remoteDescription : _RTCSessionDescription Js.t Js.opt Js.readonly_prop

    (* TODO add type *)
    (** The read-only sctp property on the RTCPeerConnection interface returns
        an RTCSctpTransport describing the SCTP transport over which SCTP data
        is being sent and received. If SCTP hasn't been negotiated, this value
        is null. *)
    method sctp : 'a Js.t Js.opt Js.readonly_prop

    (** The read-only signalingState property on the RTCPeerConnection interface
        returns one of the string values specified by the RTCSignalingState
        enum; these values describe the state of the signaling process on the
        local end of the connection while connecting or reconnecting to another
        peer. See Signaling in Lifetime of a WebRTC session for more details
        about the signaling process. *)
    method signalingState : Js.js_string Js.t Js.readonly_prop

    (* Event handlers *)

    method onaddstream
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onconnectionstatechange
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method ondatachannel
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onicecandidate
           : ('b Js.t, _RTCPeerConnectionIceEvent Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method oniceconnectionstatechange
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onicegatheringstatechange
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onidentityresult
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onidpassertionerror
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onidpvalidationerror
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onnegotiationneeded
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onpeeridentity
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onremovestream
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onsignalingstatechange
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method ontrack
           : ('b Js.t, _RTCTrackEvent Js.t) Dom_html.event_listener
               Js.writeonly_prop

    (* Methods *)

    method addIceCandidate : 'a Js.t Js.meth

    method addStream : 'a Js.t Js.meth

    (* FIXME return RTCRtpSender *)
    (* FIXME can accept multiple streams *)
    method addTrack : mediaStreamTrack Js.t -> mediaStream Js.t -> unit Js.meth

    (** The RTCPeerConnection.close() method closes the current
        peer connection. *)
    method close : unit Js.meth

    method createAnswer : 'a Js.t Js.meth

    (** The createDataChannel() method on the RTCPeerConnection interface
        creates a new channel over which any kind of data may be transmitted.
        This can be useful for back-channel content such as images, file
        transfer, text chat, game update packets, and so forth. *)
    method createDataChannel : Js.js_string Js.t -> _RTCDataChannel Js.t Js.meth

    (** Same as createDataChannel, but accepts initialization options *)
    method createDataChannel_init : Js.js_string Js.t ->
                                    _RTCDataChannelInit Js.t ->
                                    _RTCDataChannel Js.t Js.meth

    method createOffer : 'a Js.t Js.meth

    method generateCertificate : 'a Js.meth

    method getConfiguration : 'a Js.meth

    method getIdentityAssertion : 'a Js.meth

    method getLocalStreams : 'a Js.meth

    method getReceivers : 'a Js.meth

    method getRemoteStreams : 'a Js.meth

    method getSenders : 'a Js.meth

    method getStats : 'a Js.meth

    method getStreamById : 'a Js.meth

    method removeStream : 'a Js.meth

    method removeTrack : 'a Js.meth

    method setConfiguration : 'a Js.meth

    method setIdentityProvider : 'a Js.meth

    method setLocalDescription : _RTCSessionDescription Js.t -> unit Js.meth

    method setRemoteDescription : _RTCSessionDescription Js.t -> unit Js.meth

  end

  and _RTCPeerConnectionIceEvent =
    object
      inherit [_RTCPeerConnection] Dom.event

      method candidate : _RTCIceCandidate Js.t Js.opt Js.readonly_prop
    end

  and _RTCTrackEvent =
    object
      inherit [_RTCPeerConnection] Dom.event

      (* TODO add type *)
      (** The RTCRtpReceiver used by the track that's been added
          to the RTCPeerConnection. *)
      method receiver : 'a Js.t Js.readonly_prop

      (** An array of MediaStream objects, each representing one of the media
          streams which comprise the track that was added to the connection.
          By default, the array is empty. *)
      method streams : mediaStream Js.t Js.js_array Js.t Js.readonly_prop

      (** The MediaStreamTrack which has been added to the connection. *)
      method track : mediaStreamTrack Js.t Js.readonly_prop

      (* TODO add type *)
      (** The RTCRtpTransceiver being used by the new track. *)
      method transceiver : 'a Js.t Js.readonly_prop
    end

  and _RTCIceCandidate =
    object
      (** A DOMString representing the transport address for the candidate
          that can be used for connectivity checks. The format of this address
          is a candidate-attribute as defined in RFC 5245.
          This string is empty ("") if the RTCIceCandidate is an
          "end of candidates" indicator. *)
      method candidate : Js.js_string Js.t Js.readonly_prop

      (** A DOMString which indicates whether the candidate is an RTP or an
          RTCP candidate; its value is either "rtp" or "rtcp", and is derived
          from the  "component-id" field in the candidate a-line string.
          The permitted values are listed in the RTCIceComponent
          enumerated type. *)
      method component : Js.js_string Js.t Js.readonly_prop

      (** Returns a DOMString containing a unique identifier that is the same
          for any candidates of the same type, share the same base (the address
          from which the ICE agent sent the candidate), and come from the same
          STUN server. This is used to help optimize ICE performance while
          prioritizing and correlating candidates that appear on multiple
          RTCIceTransport objects. *)
      method foundation : Js.js_string Js.t Js.readonly_prop

      (** A DOMString containing the IP address of the candidate. *)
      method ip : Js.js_string Js.t Js.readonly_prop

      (** An integer value indicating the candidate's port number. *)
      method port : int Js.readonly_prop

      (** A long integer value indicating the candidate's priority. *)
      method priority : int Js.readonly_prop

      (** A string indicating whether the candidate's protocol is "tcp" or
          "udp". The string is one of those in the enumerated type
          RTCIceProtocol. *)
      method protocol : Js.js_string Js.t Js.readonly_prop

      (** If the candidate is derived from another candidate, relatedAddress
          is a DOMString containing that host candidate's IP address.
          For host candidates, this value is null. *)
      method relatedAddress : Js.js_string Js.t Js.opt Js.readonly_prop

      (** For a candidate that is derived from another, such as a relay or
          reflexive candidate, the relatedPort is a number indicating the port
          number of the candidate from which this candidate is derived.
          For host candidates, the relatedPort property is null. *)
      method relatedPort : int Js.opt Js.readonly_prop

      (** A DOMString specifying the candidate's media stream identification
          tag which uniquely identifies the media stream within the component
          with which the candidate is associated, or null if no such association
          exists. *)
      method sdpMid : Js.js_string Js.t Js.readonly_prop

      (** If not null, sdpMLineIndex indicates the zero-based index number of
          the media description (as defined in RFC 4566) in the SDP with which
          the candidate is associated. *)
      method sdpMLineIndex : int Js.opt Js.readonly_prop

      (** If protocol is "tcp", tcpType represents the type of TCP candidate.
          Otherwise, tcpType is null. *)
      method tcpType : Js.js_string Js.t Js.opt Js.readonly_prop

      (** A DOMString indicating the type of candidate as one of the strings
          from the RTCIceCandidateType enumerated type. *)
      method _type : Js.js_string Js.t Js.readonly_prop

      (** A DOMString containing a randomly-generated username fragment
          ("ice-ufrag") which ICE uses for message integrity along with
          a randomly-generated password ("ice-pwd"). You can use this string to
          verify generations of ICE generation; each generation of the same ICE
          process will use the same usernameFragment, even across ICE restarts.
       *)
      method usernameFragment : Js.js_string Js.t Js.readonly_prop

      (** Given the RTCIceCandidate's current configuration, toJSON() returns
          a DOMString containing a JSON representation of that configuration in
          the form of a RTCIceCandidateInit object. *)
      method toJSON : Js.js_string Js.t Js.meth

    end

  and _RTCSessionDescription =
    object
      (** An enum of type RTCSdpType describing the session description's
          type. *)
      method _type : Js.js_string Js.t Js.readonly_prop

      (** A DOMString containing the SDP describing the session.*)
      method sdp : Js.js_string Js.t Js.readonly_prop
    end

  (** The RTCDataChannel interface represents a network channel which can be
      used for bidirectional peer-to-peer transfers of arbitrary data.
      Every data channel is associated with an RTCPeerConnection, and each peer
      connection can have up to a theoretical maximum of 65,534 data channels
      (the actual limit may vary from browser to browser). *)
  and _RTCDataChannel =
    object
      (* Properties *)

      (** The property binaryType on the RTCDataChannel interface is a DOMString
          which specifies the type of JavaScript object which should be used to
          represent binary data received on the RTCDataChannel. Values allowed
          by the WebSocket.binaryType property are also permitted here: "blob"
          if Blob objects are being used or "arraybuffer" if ArrayBuffer objects
          are being used. The default is "blob". *)
      method binaryType : Js.js_string Js.t Js.prop

      (** The read-only RTCDataChannel property bufferedAmount returns the
          number of bytes of data currently queued to be sent over the data
          channel. *)
      method bufferedAmount : int Js.readonly_prop

      (** The RTCDataChannel property bufferedAmountLowThreshold is used to
          specify the number of bytes of buffered outgoing data that is
          considered "low." The default value is 0. *)
      method bufferedAmountLowtThreshold : int Js.prop

      (** The read-only RTCDataChannel property id returns an ID number
          (between 0 and 65,534) which uniquely identifies the
          RTCDataChannel. *)
      method id : int Js.readonly_prop

      (** The read-only RTCDataChannel property label returns a DOMString
          containing a name describing the data channel. These labels are not
          required to be unique. *)
      method label : Js.js_string Js.t Js.readonly_prop

      (** The read-only RTCDataChannel property maxPacketLifeTime returns
          the amount of time, in milliseconds, the browser is allowed to take
          to attempt to transmit a message, as set when the data channel was
          created, or null. *)
      method maxPacketLifeTime : int Js.opt Js.readonly_prop

      (** The read-only RTCDataChannel property maxRetransmits returns the
          maximum number of times the browser should try to retransmit a message
          before giving up, as set when the data channel was created, or null,
          which indicates that there is no maximum. *)
      method maxRetransmits : int Js.opt Js.readonly_prop

      (** The read-only RTCDataChannel property negotiated indicates whether
          the RTCDataChannel's connection was negotiated by the Web app (true)
          or by the WebRTC layer (false). The default is false. *)
      method negotiated : bool Js.t Js.readonly_prop

      (** The read-only RTCDataChannel property ordered indicates whether or
          not the data channel guarantees in-order delivery of messages;
          the default is true, which indicates that the data channel is indeed
          ordered. *)
      method ordered : bool Js.t Js.readonly_prop

      (** The read-only RTCDataChannel property protocol returns a DOMString
          containing the name of the subprotocol in use. If no protocol was
          specified when the data channel was created, then this property's
          value is "" (the empty string). *)
      method protocol : Js.js_string Js.t Js.readonly_prop

      (** The read-only RTCDataChannel property readyState returns an enum of
          type RTCDataChannelState which indicates the state of the data
          channel's underlying data connection. *)
      method readyState : Js.js_string Js.t Js.readonly_prop

      (* Methods *)

      (** The RTCDataChannel.close() method closes the RTCDataChannel.
          Either peer is permitted to call this method to initiate closure
          of the channel. *)
      method close : unit Js.meth

      (** The send() method of the RTCDataChannel interface sends data across
          the data channel to the remote peer. *)
      method send_blob : #File.blob Js.t -> unit Js.meth
      method send_string : Js.js_string Js.t -> unit Js.meth

    end

  and _RTCDataChannelInit =
    object
      (* See RTCDataChannel for description *)

      method ordered : bool Js.t Js.optdef_prop

      method maxPacketLifeTime : int Js.opt Js.optdef_prop

      method maxRetransmits : int Js.opt Js.optdef_prop

      method protocol : Js.js_string Js.t Js.optdef_prop

      method negotiated : bool Js.t Js.optdef_prop

      method id : int Js.optdef_prop

    end

  and mediaStream =
    object
      inherit Dom_html.eventTarget

      (** A DOMString containing 36 characters denoting a universally
        unique identifier (UUID) for the object.*)
      method id : Js.js_string Js.t Js.prop

      (** A Boolean value that returns true if the MediaStream is active,
        or false otherwise. *)
      method active : bool Js.t Js.prop

      (** An EventHandler containing the action to perform when an addtrack
        event is fired when a new MediaStreamTrack object is added. *)
      method onaddtrack
             : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
                 Js.writeonly_prop

      (** An EventHandler containing the action to perform when a removetrack
        event is fired when a  MediaStreamTrack object is removed from it. *)
      method onremovetrack
             : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
                 Js.writeonly_prop

      method addTrack : mediaStreamTrack Js.t -> unit Js.meth

      method clone : mediaStream Js.t Js.meth

      method getAudioTracks : mediaStreamTrack Js.t Js.js_array Js.t Js.meth

      method getTrackById : Js.js_string Js.t ->
                            mediaStreamTrack Js.t Js.opt Js.meth

      method getTracks : mediaStreamTrack Js.t Js.js_array Js.t Js.meth

      method getVideoTracks : mediaStreamTrack Js.t Js.js_array Js.t Js.meth

      method removeTrack : mediaStreamTrack Js.t -> unit Js.meth

    end

  and mediaStreamTrack =
    object

      (** Returns a DOMString containing a unique identifier (GUID)
          for the track; it is generated by the browser. *)
      method id : Js.js_string Js.t Js.readonly_prop

      (** A Boolean whose value of true if the track is enabled,
          that is allowed to render the media source stream;
          or false if it is disabled, that is not rendering the media source
          stream but silence and blackness. If the track has been disconnected,
          this value can be changed but has no more effect. *)
      method enabled : bool Js.t Js.prop

      (** A string that may be used by the web application to provide
          a hint as to what type of content the track contains to guide
          how it should be treated by API consumers. *)
      method contentHint : Js.js_string Js.t Js.prop

      (** Returns a Boolean value which is true if the track is isolated;
          that is, the track cannot be accessed by the document that owns
          the MediaStreamTrack. This happens when the peerIdentity property
          is set, or if the track comes from a cross-origin source. *)
      method isolated : bool Js.t Js.readonly_prop

      (** Returns a DOMString set to "audio" if the track is an audio track
          and to "video", if it is a video track. It doesn't change if the
          track is deassociated from its source. *)
      method kind : Js.js_string Js.t Js.readonly_prop

      (** Returns a DOMString containing a user agent-assigned label that
          identifies the track source, as in "internal microphone". The string
          may be left empty and is empty as long as no source has been
          connected. When the track is deassociated from its source, the label
          is not changed. *)
      method label : Js.js_string Js.t Js.readonly_prop

      (** Returns a Boolean value indicating whether the track is unable to
          provide media data due to a technical issue. *)
      method muted : bool Js.t Js.readonly_prop

      (** Returns a Boolean value with a value of true if the track is
          readonly (such a video file source or a camera that settings can't
          be modified), false otherwise. *)
      method readonly : bool Js.t Js.readonly_prop

      (** Returns an enumerated value giving the status of the track.
          This will be one of the following values:

          "live" which indicates that an input is connected and does
          its best-effort in providing real-time data. In that case, the
          output of data can be switched on or off using the enabled attribute.

          "ended" which indicates that the input is not giving any more data and
          will never provide new data.*)
      method readyState : Js.js_string Js.t Js.readonly_prop

      method applyConstraints : mediaTrackConstraints Js.t -> unit Js.meth

      method clone : mediaStreamTrack Js.t Js.meth

      method getCapabilities : unit Js.meth

      method getConstraints : mediaTrackConstraints Js.t Js.meth

      method getSettings : mediaTrackSettings Js.t Js.meth

      method stop : unit Js.meth

      (* Event handlers *)

      method onended
             : ('b Js.t, mediaStreamTrack Dom.event Js.t) Dom_html.event_listener
                 Js.writeonly_prop

    end

  and mediaTrackSettings =
    object

      (** A DOMString indicating the current value of the deviceId property.
          The device ID is a origin-unique string identifying the source of
          the track; this is usually a GUID. This value is specific to the
          source of the track's data and is not usable for setting constraints;
          it can, however, be used for initially selecting media when calling
          MediaDevices.getUserMedia(). *)
      method deviceId : Js.js_string Js.t Js.prop

      (** A DOMString indicating the current value of the groupId property.
          The group ID is a browsing session-unique string identifying the
          source group of the track. Two devices (as identified by the deviceId)
          are considered part of the same group if they are from the same
          physical device. For instance, the audio input and output devices for
          the speaker and microphone built into a phone would share the same
          group ID, since they're part of the same physical device.
          The microphone on a headset would have a different ID, though.
          This value is specific to the source of the track's data and is not
          usable for setting constraints; it can, however, be used for initially
          selecting media when calling MediaDevices.getUserMedia(). *)
      method groupId : Js.js_string Js.t Js.prop

      (* AUDIO *)

      (** A Boolean which indicates the current value of the autoGainControl
          property, which is true if automatic gain control is enabled and is
          false otherwise. *)
      method audioGainControl : bool Js.t Js.prop

      (** A long integer value indicating the current value of the channelCount
          property, specifying the number of audio channels present on the track
          (therefore indicating how many audio samples exist in each audio
          frame). This is 1 for mono, 2 for stereo, and so forth. *)
      method channelCount : int Js.t Js.prop

      (** A Boolean indicating the current value of the echoCancellation
          property, specifying true if echo cancellation is enabled,
          otherwise false. *)
      method echoCancellation : bool Js.t Js.prop

      (** A double-precision floating point value indicating the current
          value of the latency property, specifying the audio latency,
          in seconds. Latency is the amount of time which elapses between
          the start of processing the audio and the data being available to
          the next stop in the audio utilization process.
          This value is a target value; actual latency may vary to some extent
          for various reasons. *)
      method latency : float Js.t Js.prop

      (** A Boolean which indicates the current value of the noiseSupression
          property, which is true if noise suppression is enabled and is false
          otherwise. *)
      method noiseSuppression : bool Js.t Js.prop

      (** A long integer value indicating the current value of the sampleRate
          property, specifying the sample rate in samples per second of the
          audio data. Standard CD-quality audio, for example, has a sample rate
          of 41,000 samples per second. *)
      method sampleRate : int Js.t Js.prop

      (** A long integer value indicating the current value of the sampleSize
          property, specifying the linear size, in bits, of each audio sample.
          CD-quality audio, for example, is 16-bit, so this value would be 16
          in that case. *)
      method sampleSize : int Js.t Js.prop

      (** A double-precision floating point value indicating the current value
          of the volume property, specifying the volume level of the track.
          This value will be between 0.0 (silent) to 1.0
          (maximum supported volume). *)
      method volume : float Js.t Js.prop

      (* VIDEO *)

      (** A double-precision floating point value indicating the current value
          of the aspectRatio property, specified precisely to 10 decimal places.
          This is the width of the image in pixels divided by its height in
          pixels. Common values include 1.3333333333 (for the classic televison
          4:3 "standard" aspect ratio, also used on tablets such as Apple's
          iPad), 1.7777777778 (for the 16:9 high-definition widescreen aspect
          ratio), and 1.6 (for the 16:10 aspect ratio common among widescreen
          computers and tablets). *)
      method aspectRatio : float Js.t Js.prop

      (** A DOMString indicating the current value of the facingMode property,
          specifying the direction the camera is facing. The value will be one
          of:
          - "user"
          A camera facing the user (commonly known as a "selfie cam"), used for
          self-portraiture and video calling.
          - "environment"
          A camera facing away from the user (when the user is looking at the
          screen). This is typically the highest quality camera on the device,
          used for general photography.
          - "left"
          A camera facing toward the environment to the user's left.
          - "right"
          A camera facing toward the environment to the user's right. *)
      method facingMode : Js.js_string Js.t Js.prop

      (** A double-precision floating point value indicating the current
          value of the frameRate property, specifying how many frames of
          video per second the track includes. If the value can't be determined
          for any reason, the value will match the vertical sync rate of the
          device the user agent is running on. *)
      method frameRate : float Js.t Js.prop

      (** A long integer value indicating the current value of the height
          property, specifying the height of the track's video data in
          pixels. *)
      method height : int Js.t Js.prop

      (** A long integer value indicating the current value of the width
          property, specifying the width of the track's video data in pixels. *)
      method width : int Js.t Js.prop

      (** A DOMString indicating the current value of the resizeMode property,
          specifying the mode used by the user agent to derive the resolution
          of the track. The value will be one of:
          - "none"
          The track has the resolution offered by the camera, its driver or
          the OS.
          - "crop-and-scale"
          The track's resolution might be the result of the user agent using
          cropping or downscaling from a higher camera resolution. *)
      method resizeMode : Js.js_string Js.t Js.prop

      (* SHARED SCREEN TRACKS *)

      (** A DOMString which indicates whether or not the mouse cursor is being
          included in the generated stream and under what conditions.
          Possible values are:
          - always
          The mouse is always visible in the video content of the
          {domxref("MediaStream"), unless the mouse has moved outside the area
          of the content.
          - motion
          The mouse cursor is always included in the video if it's moving, and
          for a short time after it stops moving.
          - never
          The mouse cursor is never included in the shared video. *)
      method cursor : Js.js_string Js.t Js.prop

      (** A DOMString which specifies the type of source the track contains;
          one of:
          - application
          The stream contains all of the windows of the application chosen
          by the user rendered into the one video track.
          - browser
          The stream contains the contents of a single browser tab selected
          by the user.
          - monitor
          The stream's video track contains the entire contents of one or
          more of the user's screens.
          - window
          The stream contains a single window selected by the user for
          sharing. *)
      method displaySurface : Js.js_string Js.t Js.prop

      (** A Boolean value which, if true, indicates that the video contained in
          the stream's video track contains a background rendering context,
          rather than a user-visible one. This is false if the video being
          captured is coming from a foreground (user-visible) source. *)
      method logicalSurface : bool Js.t Js.prop

    end

  and mediaTrackConstraints =
    object

    end

  (** The RTCIceServer dictionary defines how to connect to a single ICE server
      (such as a STUN or TURN server). It includes both the URL and
      the necessary credentials, if any, to connect to the server. *)
  and _RTCIceServer =
    object

      method credential : Js.js_string Js.t Js.optdef_prop

      method credentialType : Js.js_string Js.t Js.optdef_prop

      method urls : Js.js_string Js.t Js.optdef_prop

      method urls_ : Js.js_string Js.t Js.js_array Js.t Js.optdef_prop

      method username : Js.js_string Js.t Js.optdef_prop
    end

  (** An RTCConfiguration dictionary providing options
      to configure the new connection. *)
  and _RTCConfiguration =
    object

      (** Specifies how to handle negotiation of candidates when the remote
          peer is not compatible with the SDP BUNDLE standard. This must be one
          of the values from the enum RTCBundlePolicy. If this value isn't
          included in the dictionary, "balanced" is assumed. *)
      method bundlePolicy : Js.js_string Js.t Js.optdef_prop

      (** An Array of objects of type RTCCertificate which are used by the
          connection for authentication. If this property isn't specified,
          a set of certificates is generated automatically for each
          RTCPeerConnection instance. Although only one certificate is used by
          a given connection, providing certificates for multiple algorithms may
          improve the odds of successfully connecting in some circumstances.
          See Using certificates below for additional information. *)
      method certificates : 'a Js.t Js.js_array Js.t Js.optdef_prop

      (** An unsigned 16-bit integer value which specifies the size of the
          prefetched ICE candidate pool. The default value is 0 (meaning no
          candidate prefetching will occur). You may find in some cases that
          connections can be established more quickly by allowing the ICE agent
          to start fetching ICE candidates before you start trying to connect,
          so that they're already available for inspection when
          RTCPeerConnection.setLocalDescription() is called. *)
      method iceCandidatePoolSize : int Js.optdef_prop

      (** An array of RTCIceServer objects, each describing one server which
          may be used by the ICE agent; these are typically STUN and/or TURN
          servers. If this isn't specified, the ICE agent may choose to use
          its own ICE servers; otherwise, the connection attempt will be made
          with no STUN or TURN server available, which limits the connection
          to local peers. *)
      method iceServers : _RTCIceServer Js.t Js.js_array Js.t Js.optdef_prop

      (** The current ICE transport policy; this must be one of the values
          from the RTCIceTransportPolicy enum. If this isn't specified,
          "all" is assumed. *)
      method iceTransportPolicy : Js.js_string Js.t Js.optdef_prop

      (** A DOMString which specifies the target peer identity for the
          RTCPeerConnection. If this value is set (it defaults to null),
          the RTCPeerConnection will not connect to a remote peer unless
          it can successfully authenticate with the given name. *)
      method peerIdentity : Js.js_string Js.t Js.optdef_prop

      (** The RTCP mux policy to use when gathering ICE candidates, in order
          to support non-multiplexed RTCP. The value must be one of those from
          the RTCRtcpMuxPolicy enum. The default is "require". *)
      method rtcpMuxPolicy : Js.js_string Js.t Js.optdef_prop

    end
