open Js_of_ocaml
open Promise

class type longRange =
  object
    method max : int Js.prop
    method min : int Js.prop
  end

class type doubleRange =
  object
    method max : float Js.prop
    method min : float Js.prop
  end

class type point =
  object
    method x : float Js.prop
    method y : float Js.prop
  end

type 'a or_array

let wrap_single (x : 'a) : 'a or_array Js.t =
  (Obj.magic x)

let wrap_array (x : 'a Js.js_array Js.t) : 'a or_array Js.t =
  Js.Unsafe.coerce x

let cast_single (x : 'a or_array Js.t) : 'a Js.opt =
  if not @@ Js.instanceof x (Js.Unsafe.global##._Array)
  then Js.some (Obj.magic x)
  else Js.null

let cast_array (x : 'a or_array Js.t) : 'a Js.js_array Js.t Js.opt =
  if Js.instanceof x (Js.Unsafe.global##._Array)
  then Js.some (Js.Unsafe.coerce x)
  else Js.null

module Constrain = struct

  type ('a, 'b) v =
    [ `V of 'a
    | `O of 'b
    ]

  type ('a, 'b) mv =
    [ ('a, 'b) v
    | `A of 'a list
    ]

  module Long = struct

    type t

    class type obj =
      object
        inherit longRange
        method exact : int Js.optdef_prop
        method ideal : int Js.optdef_prop
      end

    type value = (int, obj Js.t) v

    let wrap : value -> t Js.t = function
      | `V x -> Js.Unsafe.coerce @@ Js.number_of_float @@ float_of_int x
      | `O x -> Js.Unsafe.coerce x

    let unwrap (x : t Js.t) : value =
      if Js.typeof x == Js.string "number"
      then `V (int_of_float @@ Js.float_of_number @@ Js.Unsafe.coerce x)
      else if Js.typeof x == Js.string "object"
      then `O (Js.Unsafe.coerce x)
      else failwith "Bad long value"

  end

  module Double = struct

    type t

    class type obj =
      object
        inherit doubleRange
        method exact : float Js.optdef_prop
        method ideal : float Js.optdef_prop
      end

    type value = (float, obj Js.t) v

    let wrap : value -> t Js.t = function
      | `V x -> Js.Unsafe.coerce @@ Js.number_of_float x
      | `O x -> Js.Unsafe.coerce x

    let unwrap (x : t Js.t) : value =
      if Js.typeof x == Js.string "number"
      then `V (Js.float_of_number @@ Js.Unsafe.coerce x)
      else if Js.typeof x == Js.string "object"
      then `O (Js.Unsafe.coerce x)
      else failwith "Bad double value"

  end

  module Bool = struct

    type t

    class type obj =
      object
        method exact : bool Js.t Js.optdef_prop
        method ideal : bool Js.t Js.optdef_prop
      end

    type value = (bool, obj Js.t) v

    let wrap : value -> t Js.t = function
      | `V x -> Js.Unsafe.coerce @@ Js.bool x
      | `O x -> Js.Unsafe.coerce x

    let unwrap (x : t Js.t) : value =
      if Js.typeof x == Js.string "boolean"
      then `V (Js.to_bool @@ Js.Unsafe.coerce x)
      else if Js.typeof x == Js.string "object"
      then `O (Js.Unsafe.coerce x)
      else failwith "Bad boolean value"

  end

  module String = struct
    type t

    class type obj =
      object
        method exact : Js.js_string Js.t Js.optdef_prop
        method ideal : Js.js_string Js.t or_array Js.optdef_prop
      end

    type value = (string, obj Js.t) mv

    let wrap : value -> t Js.t = function
      | `V x -> Js.Unsafe.coerce @@ Js.string x
      | `O x -> Js.Unsafe.coerce x
      | `A x -> Js.Unsafe.coerce
                @@ Js.array
                @@ Array.of_list
                @@ List.map Js.string x

    let unwrap (x : t Js.t) : value =
      if Js.instanceof x (Js.Unsafe.global##._String)
      then `V (Js.to_string @@ Js.Unsafe.coerce x)
      else if Js.typeof x == Js.string "object"
      then `O (Js.Unsafe.coerce x)
      else if Js.instanceof x (Js.Unsafe.global##._Array)
      then `A (List.map Js.to_string
               @@ Array.to_list
               @@ Js.to_array
               @@ Js.Unsafe.coerce x)
      else failwith "Bad dom string value"
  end

end

class type _RTCPeerConnection =
  object

    (** The read-only RTCPeerConnection property canTrickleIceCandidates
        returns a Boolean which indicates whether or not the remote peer
        can accept trickled ICE candidates. *)
    method canTrickleIceCandidates : bool Js.t Js.readonly_prop

    (** The read-only connectionState property of the RTCPeerConnection
        interface indicates the current state of the peer connection by
        returning one of the string values specified by the enum
        RTCPeerConnectionState. *)
    method connectionState : Js.js_string Js.t Js.readonly_prop

    (** The read-only property RTCPeerConnection.currentLocalDescription
        returns an RTCSessionDescription object describing the local end
        of the connection as it was most recently successfully negotiated
        since the last time the  RTCPeerConnection finished negotiating and
        connecting to a remote peer. Also included is a list of any ICE
        candidates that may already have been generated by the ICE agent since
        the offer or answer represented by the description was first
        instantiated. *)
    method currentLocalDescription : _RTCSessionDescription Js.t Js.opt Js.readonly_prop

    (** The read-only property RTCPeerConnection.currentRemoteDescription
        returns an RTCSessionDescription object describing the remote end
        of the connection as it was most recently successfully negotiated
        since the last time the RTCPeerConnection finished negotiating and
        connecting to a remote peer. Also included is a list of any ICE
        candidates that may already have been generated by the ICE agent since
        the offer or answer represented by the description was first
        instantiated. *)
    method currentRemoteDescription : _RTCSessionDescription Js.t Js.opt Js.readonly_prop

    (** The read-only property RTCPeerConnection.defaultIceServers returns
        an array of objects based on the RTCIceServer dictionary, which
        indicates what, if any, ICE servers the browser will use by default
        if none are provided to the RTCPeerConnection in its RTCConfiguration.
        However, browsers are not required to provide any default ICE servers
        at all. *)
    method defaultIceServers : _RTCIceServer Js.t Js.js_array Js.t Js.readonly_prop

    (** The read-only property RTCPeerConnection.iceConnectionState returns
        an enum of type RTCIceConnectionState which state of the ICE agent
        associated with the RTCPeerConnection. *)
    method iceConnectionState : Js.js_string Js.t Js.readonly_prop

    (** The read-only property RTCPeerConnection.iceGatheringState returns
        an enum of type RTCIceGatheringState that describes connection's ICE
        gathering state. This lets you detect, for example, when collection
        of ICE candidates has finished. *)
    method iceGatheringState : Js.js_string Js.t Js.readonly_prop

    (** The read-only property RTCPeerConnection.localDescription returns an
        RTCSessionDescription describing the session for the local end of the
        connection. If it has not yet been set, this is null. *)
    method localDescription : _RTCSessionDescription Js.t Js.opt Js.readonly_prop

    (* TODO add type *)
    (** The read-only property RTCPeerConnection.peerIdentity returns
        an RTCIdentityAssertion, containing a DOMString once set and verified.
        If no peer has yet been set and verified, this property will return
        null. Once set, via the appropriate method, it can't be changed. *)
    method peerIdentity : 'a Js.t Js.opt Js.readonly_prop

    (** The read-only property RTCPeerConnection.pendingLocalDescription
        returns an RTCSessionDescription object describing a pending
        configuration change for the local end of the connection.
        This does not describe the connection as it currently stands, but as
        it may exist in the near future.
        Use RTCPeerConnection.currentLocalDescription or
        RTCPeerConnection.localDescription to get the current state of
        the endpoint. For details on the difference, see Pending and current
        descriptions in WebRTC connectivity. *)
    method pendingLocalDescription : _RTCSessionDescription Js.t Js.opt Js.readonly_prop

    (** The read-only property RTCPeerConnection.pendingRemoteDescription
        returns an RTCSessionDescription object describing a pending
        configuration change for the remote end of the connection.
        This does not describe the connection as it currently stands, but as
        it may exist in the near future.
        Use RTCPeerConnection.currentRemoteDescription or
        RTCPeerConnection.remoteDescription to get the current session
        description for the remote endpoint. For details on the difference, see
        Pending and current descriptions in WebRTC connectivity. *)
    method pendingRemoteDescription : _RTCSessionDescription Js.t Js.opt Js.readonly_prop

    (** The read-only property RTCPeerConnection.remoteDescription returns
        a RTCSessionDescription describing the session (which includes
        configuration and media information) for the remote end of the
        connection. If this hasn't been set yet, this is null. *)
    method remoteDescription : _RTCSessionDescription Js.t Js.opt Js.readonly_prop

    (* TODO add type *)
    (** The read-only sctp property on the RTCPeerConnection interface returns
        an RTCSctpTransport describing the SCTP transport over which SCTP data
        is being sent and received. If SCTP hasn't been negotiated, this value
        is null. *)
    method sctp : 'a Js.t Js.opt Js.readonly_prop

    (** The read-only signalingState property on the RTCPeerConnection interface
        returns one of the string values specified by the RTCSignalingState
        enum; these values describe the state of the signaling process on the
        local end of the connection while connecting or reconnecting to another
        peer. See Signaling in Lifetime of a WebRTC session for more details
        about the signaling process. *)
    method signalingState : Js.js_string Js.t Js.readonly_prop

    (* Event handlers *)

    method onaddstream
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onconnectionstatechange
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method ondatachannel
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onicecandidate
           : ('b Js.t, _RTCPeerConnectionIceEvent Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method oniceconnectionstatechange
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onicegatheringstatechange
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onidentityresult
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onidpassertionerror
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onidpvalidationerror
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onnegotiationneeded
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onpeeridentity
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onremovestream
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method onsignalingstatechange
           : ('b Js.t, Dom_html.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    method ontrack
           : ('b Js.t, _RTCTrackEvent Js.t) Dom_html.event_listener
               Js.writeonly_prop

    (* Methods *)

    (** When a web site or app using RTCPeerConnection receives a new ICE
        candidate from the remote peer over its signaling channel, it delivers
        the newly-received candidate to the browser's ICE agent by calling
        RTCPeerConnection.addIceCandidate(). *)
    method addIceCandidate : _RTCIceCandidateInit Js.t -> (unit, exn) promise Js.meth

    method addStream : 'a Js.t Js.meth

    (* FIXME return RTCRtpSender *)
    (* FIXME can accept multiple streams *)
    method addTrack : mediaStreamTrack Js.t -> mediaStream Js.t -> unit Js.meth

    (** The RTCPeerConnection.close() method closes the current
        peer connection. *)
    method close : unit Js.meth

    (** The createOffer() method of the RTCPeerConnection interface initiates
        the creation of an SDP offer for the purpose of starting a new WebRTC
        connection to a remote peer. *)
    method createOffer
           : _RTCOfferOptions Js.t ->
             (_RTCSessionDescriptionInit Js.t, exn) promise Js.meth
    method createOffer_
           : (_RTCSessionDescriptionInit Js.t, exn) promise Js.meth

    (** The createAnswer() method on the RTCPeerConnection interface creates
        an SDP answer to an offer received from a remote peer during the
        offer/answer negotiation of a WebRTC connection. The answer contains
        information about any media already attached to the session, codecs
        and options supported by the browser, and any ICE candidates already
        gathered. The answer is delivered to the returned Promise, and should
        then be sent to the source of the offer to continue the negotiation
        process. *)
    method createAnswer
           : _RTCAnswerOptions Js.t ->
             (_RTCSessionDescriptionInit Js.t, exn) promise Js.meth
    method createAnswer_
           : (_RTCSessionDescriptionInit Js.t, exn) promise Js.meth

    (** The createDataChannel() method on the RTCPeerConnection interface
        creates a new channel over which any kind of data may be transmitted.
        This can be useful for back-channel content such as images, file
        transfer, text chat, game update packets, and so forth. *)
    method createDataChannel
           : Js.js_string Js.t ->
             _RTCDataChannelInit Js.t ->
             _RTCDataChannel Js.t Js.meth
    method createDataChannel_
           : Js.js_string Js.t ->
             _RTCDataChannel Js.t Js.meth

    method generateCertificate : 'a Js.meth

    (** The RTCPeerConnection.getConfiguration() method returns
        an RTCConfiguration object which indicates the current configuration
        of the RTCPeerConnection on which the method is called. *)
    method getConfiguration : _RTCConfiguration Js.t Js.meth

    (** The RTCPeerConnection.getIdentityAssertion() method initiates
        the gathering of an identity assertion. This has an effect only if
        the signalingState is not "closed". *)
    method getIdentityAssertion : unit Js.meth

    (** The RTCPeerConnection.getLocalStreams() method returns an array of
        MediaStream associated with the local end of the connection.
        The array may be empty. *)
    method getLocalStreams : mediaStream Js.t Js.js_array Js.t Js.meth

    (** The RTCPeerConnection.getReceivers() method returns an array of
        RTCRtpReceiver objects, each of which represents one RTP receiver.
        Each RTP receiver manages the reception and decoding of data for
        a MediaStreamTrack on an RTCPeerConnection *)
    method getReceivers : _RTCRtpReceiver Js.t Js.js_array Js.t Js.meth

    (** The RTCPeerConnection.getRemoteStreams() method returns an array of
        MediaStream associated with the remote end of the connection.
        The array may be empty. *)
    method getRemoteStreams : mediaStream Js.t Js.js_array Js.t Js.meth

    (** The RTCPeerConnection method getSenders() returns an array of
        RTCRtpSender objects, each of which represents the RTP sender
        responsible for transmitting one track's data. *)
    method getSenders : _RTCRtpSender Js.t Js.js_array Js.t Js.meth

    (* TODO add description *)
    method getTransceivers : _RTCRtpTransceiver Js.t Js.js_array Js.t Js.meth

    (** The RTCPeerConnection method addTransceiver() creates a new
        RTCRtpTransceiver and adds it to the set of transceivers associated
        with the RTCPeerConnection. Each transceiver represents a bidirectional
        stream, with both an RTCRtpSender and an RTCRtpReceiver associated with
        it. *)
    method addTransceiver
           : Js.js_string Js.t ->
             _RTCRtpTransceiverInit Js.t ->
             _RTCRtpTransceiver Js.t Js.meth
    method addTransceiver_void
           : Js.js_string Js.t ->
             _RTCRtpTransceiver Js.t Js.meth
    method addTransceiver_track
           : mediaStreamTrack Js.t ->
             _RTCRtpTransceiverInit Js.t ->
             _RTCRtpTransceiver Js.t Js.meth
    method addTransceiver_trackVoid
           : mediaStreamTrack Js.t ->
             _RTCRtpTransceiver Js.t Js.meth

    (* TODO *)
    method getStats : 'a Js.meth

    (** The RTCPeerConnection.getStreamById() method returns the MediaStream
        with the given id that is associated with local or remote end of the
        connection. If no stream matches, it returns null. *)
    method getStreamById : Js.js_string Js.t -> mediaStream Js.t Js.opt Js.meth

    (** The RTCPeerConnection.removeStream() method removes a MediaStream as
        a local source of audio or video. If the negotiation already happened,
        a new one will be needed for the remote peer to be able to use it.
        Because this method has been deprecated, you should instead use
        removeTrack() if your target browser versions have implemented it. *)
    method removeStream : mediaStream Js.t -> unit Js.meth

    (** The RTCPeerConnection.removeTrack() method tells the local end of the
        connection to stop sending media from the specified track, without
        actually removing the corresponding RTCRtpSender from the list of
        senders as reported by RTCPeerConnection.getSenders(). *)
    method removeTrack : _RTCRtpSender Js.t -> unit Js.meth

    (** The RTCPeerConnection.setConfiguration() method sets the current
        configuration of the RTCPeerConnection based on the values included
        in the specified RTCConfiguration object. This lets you change the
        ICE servers used by the connection and which transport policies
        to use. *)
    method setConfiguration : _RTCConfiguration Js.t -> unit Js.meth Js.meth

    (** The RTCPeerConnection.setIdentityProvider() method sets the Identity
        Provider (IdP) to the triplet given in parameter: its name, the protocol
        used to communicate with it (optional) and an optional username.
        The IdP will be used only when an assertion is needed. *)
    method setIdentityProvider : Js.js_string Js.t -> unit Js.meth
    method setIdentityProvider_protocol : Js.js_string Js.t ->
                                          Js.js_string Js.t ->
                                          unit Js.meth
    method setIdentityProvider_username : Js.js_string Js.t ->
                                          Js.js_string Js.t ->
                                          Js.js_string Js.t ->
                                          unit Js.meth

    (** The RTCPeerConnection.setLocalDescription() method changes the local
        description associated with the connection. This description specifies
        the properties of the local end of the connection, including the media
        format. *)
    method setLocalDescription : _RTCSessionDescriptionInit Js.t ->
                                 (unit, exn) promise Js.meth


    (** The RTCPeerConnection.setRemoteDescription() method changes the remote
        description associated with the connection. This description specifies
        the properties of the remote end of the connection, including the media
        format. *)
    method setRemoteDescription : _RTCSessionDescriptionInit Js.t ->
                                  (unit, exn) promise Js.meth

  end

  and _RTCOfferAnswerOptions =
    object

      (** Many codecs and systems are capable of detecting "silence" and
          changing their behavior in this case by doing things such as not
          transmitting any media. In many cases, such as when dealing with
          emergency calling or sounds other than spoken voice, it is desirable
          to be able to turn off this behavior. This option allows the
          application to provide information about whether it wishes this type
          of processing enabled or disabled. *)
      method voiceActivityDetection : bool Js.t Js.optdef_prop

    end

  and _RTCAnswerOptions =
    object

      inherit _RTCOfferAnswerOptions

    end

  and _RTCOfferOptions =
    object

      inherit _RTCOfferAnswerOptions

      (** To restart ICE on an active connection, set this to true.
          This will cause the returned offer to have different credentials
          than those already in place. If you then apply the returned offer,
          ICE will restart. Specify false to keep the same credentials and
          therefore not restart ICE. The default is false. *)
      method iceRestart : bool Js.t Js.optdef_prop

      (** A legacy Boolean option which used to control whether or not to offer
          to the remote peer the opportunity to try to send audio.
          If this value is false, the remote peer will not be offered to send
          audio data, even if the local side will be sending audio data.
          If this value is true, the remote peer will be offered to send audio
          data, even if the local side will not be sending audio data.
          The default behavior is to offer to receive audio only if the local
          side is sending audio, not otherwise. *)
      method offerToReceiveAudio : bool Js.t Js.optdef_prop

      (** A legacy Boolean option which used to control whether or not to offer
          to the remote peer the opportunity to try to send video.
          If this value is false, the remote peer will not be offered to send
          video data, even if the local side will be sending video data.
          If this value is true, the remote peer will be offered to send video
          data, even if the local side will not be sending video data.
          The default behavior is to offer to receive video only if the local
          side is sending video, not otherwise. *)
      method offerToReceiveVideo : bool Js.t Js.optdef_prop

    end

  (** The RTCRtpTransceiverInit dictionary is used when calling the WebRTC
      function RTCPeerConnection.addTransceiver() to provide configuration
      options for the new transceiver. *)
  and _RTCRtpTransceiverInit =
    object

      (** The new transceiver's preferred directionality.
          This value is used to initialize the new RTCRtpTransceiver object's
          RTCRtpTransceiver.direction property. *)
      method direction : Js.js_string Js.t Js.optdef_prop

      (** A list of encodings to allow when sending RTP media from
          the RTCRtpSender. Each entry is of type RTCRtpEncodingParameters. *)
      method sendEncodings
             : _RTCRtpEncodingParameters Js.t Js.js_array Js.t Js.optdef_prop

      (** A list of MediaStream objects to add to the transceiver's
          RTCRtpReceiver; when the remote peer's RTCPeerConnection's track event
          occurs, these are the streams that will be specified by that event. *)
      method streams : mediaStream Js.t Js.js_array Js.t Js.optdef_prop

    end

  (** An instance of the WebRTC API's RTCRtpEncodingParameters dictionary
      describes a single configuration of a codec for an RTCRtpSender.
      It's used in the RTCRtpSendParameters describing the configuration of
      an RTP sender's encodings; RTCRtpDecodingParameters is used to describe
      the configuration of an RTP receiver's encodings. *)
  and _RTCRtpEncodingParameters =
    object

      (** If true, the described encoding is currently actively being used.
          That is, for RTP senders, the encoding is currently being used to
          send data, while for receivers, the encoding is being used to decode
          received data. The default value is true. *)
      method active : bool Js.t Js.prop

      (** Indicates the priority of this encoding.
          It is specified in RTCWEB-TRANSPORT, Section 4. *)
      method priority : Js.js_string Js.t Js.prop

      (** When describing a codec for an RTCRtpSender, codecPayloadType is a
          single 8-bit byte (or octet) specifying the codec to use for sending
          the stream; the value matches one from the owning RTCRtpParameters
          object's codecs parameter. This value can only be set when creating
          the transceiver; after that, this value is read only. *)
      method codecPayloadType : int Js.readonly_prop

      (** Only used for an RTCRtpSender whose kind is audio, this property
          indicates whether or not to use discontinuous transmission (a feature
          by which a phone is turned off or the microphone muted automatically
          in the absence of voice activity).
          The value is taken from the enumerated string type RTCDtxStatus. *)
      method dtx : bool Js.t Js.prop

      (** An unsigned long integer indicating the maximum number of bits per
          second to allow for this encoding. Other parameters may further
          constrain the bit rate, such as the value of maxFramerate or transport
          or physical network limitations. *)
      method maxBitrate : int Js.prop

      (** A double-precision floating-point value specifying the maximum number
          of frames per second to allow for this encoding. *)
      method maxFramerate : float Js.prop

      (** An unsigned long integer value indicating the preferred duration of
          a media packet in milliseconds. This is typically only relevant for
          audio encodings. The user agent will try to match this as well as it
          can, but there is no guarantee. *)
      method ptime : int Js.prop

      (** A DOMString which, if set, specifies an RTP stream ID (RID) to be sent
          using the RID header extension. This parameter cannot be modified
          using setParameters().
          Its value can only be set when the transceiver is first created. *)
      method rid : Js.js_string Js.t Js.readonly_prop

      (** Only used for senders whose track's kind is video, this is a
          double-precision floating-point value specifying a factor by which to
          scale down the video during encoding. The default value, 1.0, means
          that the sent video's size will be the same as the original.
          A value of 2.0 scales the video frames down by a factor of 2 in each
          dimension, resulting in a video 1/4 the size of the original.
          The value must not be less than 1.0 (you can't use this to scale the
          video up). *)
      method scaleResolutionDownBy : float Js.prop

    end

  (** The WebRTC interface RTCRtpTransceiver describes a permanent pairing of
      an RTCRtpSender and an RTCRtpReceiver, along with some shared state. *)
  and _RTCRtpTransceiver =
    object

      (* Properties *)

      (** A string from the enum RTCRtpTransceiverDirection which indicates the
          transceiver's current directionality, or null if the transceiver is
          stopped or has never participated in an exchange of offers
          and answers. *)
      method currentDirection : Js.js_string Js.t Js.opt Js.readonly_prop

      (** A string from the enum RTCRtpTransceiverDirection which is used to
          set the transceiver's desired direction. *)
      method direction : Js.js_string Js.t Js.prop

      (** The media ID of the m-line associated with this transceiver.
          This association is established, when possible, whenever either
          a local or remote description is applied. This field is null if
          neither a local or remote description has been applied, or if its
          associated m-line is rejected by either a remote offer
          or any answer. *)
      method mid : Js.js_string Js.t Js.readonly_prop

      (** The RTCRtpReceiver object that handles receiving and decoding incoming
          media. *)
      method receiver : _RTCRtpReceiver Js.t Js.readonly_prop

      (** The RTCRtpSender object responsible for encoding and sending data to
          the remote peer. *)
      method sender : _RTCRtpSender Js.t Js.readonly_prop

      (** Indicates whether or not sending and receiving using the paired
          RTCRtpSender and RTCRtpReceiver has been permanently disabled, either
          due to SDP offer/answer, or due to a call to stop(). *)
      method stopped : bool Js.t Js.prop

      (* Methods *)

      (** A list of RTCRtpCodecParameters objects which override the default
          preferences used by the user agent for the transceiver's codecs. *)
      method setCodecPreferences
             : _RTCRtpCodecParameters Js.t Js.js_array Js.t ->
               unit Js.meth

      (** Permanently stops the RTCRtpTransceiver. The associated sender stops
          sending data, and the associated receiver likewise stops receiving
          and decoding incoming data. *)
      method stop : unit Js.meth

    end

  (** The RTCRtpCodecParameters dictionary, part of the WebRTC API, is used to
      describe the configuration parameters for a single media codec.
      In addition to being the type of the RTCRtpParameters.codecs property,
      it's used when calling RTCRtpTransceiver.setCodecPreferences()
      to configure a transceiver's codecs before beginning the offer/answer
      process to establish a WebRTC peer connection. *)
  and _RTCRtpCodecParameters =
    object

      (** The RTP payload type used to identify this codec. *)
      method payloadType : int Js.optdef Js.readonly_prop

      (** The codec's MIME media type and subtype specified as a DOMString
          of the form "type/subtype".
          IANA maintains a registry of valid MIME types. *)
      method mimeType : Js.js_string Js.t Js.optdef Js.readonly_prop

      (** An unsigned long integer value specifying the codec's clock rate
          in hertz (Hz). The clock rate is the rate at which the codec's RTP
          timestamp advances. Most codecs have specific values or ranges of
          values they permit; see the IANA payload format media type registry
          for details. *)
      method clockRate : int Js.optdef Js.readonly_prop

      (** An unsigned short integer indicating the number of channels the codec
          should support. For example, for audio codecs, a value of 1 specifies
          monaural sound while 2 indicates stereo. *)
      method channels : int Js.optdef Js.readonly_prop

      (** A DOMString containing the format-specific parameters field from the
          "a=fmtp" line in the codec's SDP, if one is present; see section 5.8
          of the IETF specification for JSEP. *)
      method sdpFmtpLine : Js.js_string Js.t Js.optdef Js.readonly_prop

    end

  (** The RTCRtpReceiver interface of the WebRTC API manages the reception and
      decoding of data for a MediaStreamTrack on an RTCPeerConnection. *)
  and _RTCRtpReceiver =
    object

      (* TODO implement *)

      (** The MediaStreamTrack which is being handled by the RTCRtpSender.
          If track is null, the RTCRtpSender doesn't transmit anything. *)
      method track : mediaStreamTrack Js.t Js.opt Js.readonly_prop

    end

  (** The RTCRtpSender interface provides the ability to control and obtain
      details about how a particular MediaStreamTrack is encoded and sent to
      a remote peer. With it, you can configure the encoding used for the
      corresponding track, get information about the device's media
      capabilities, and so forth. You can also obtain access to an RTCDTMFSender
      which can be used to send DTMF codes to the remote peer. *)
  and _RTCRtpSender =
    object

      (* Properties *)

      (** An RTCDTMFSender which can be used to send DTMF tones using
          "telephone-event" payloads on the RTP session represented by
          the RTCRtpSender object. If null, the track and/or the connection
          doesn't support DTMF. Only audio tracks can support DTMF. *)
      method dtmf : _RTCDTMFSender Js.t Js.opt Js.readonly_prop

      (* FIXME add type *)
      (** The transport over which Real-time Transport Control Protocol (RTCP)
          information is exchanged. This value is null before the
          RTCDtlsTransport object is created. When bundling is in use, more than
          one RTCRtpSender can share the same transport, sending all RTP and
          RTCP information over that one transport. *)
      method rtcpTransport : 'a Js.t Js.opt Js.readonly_prop

      (** The MediaStreamTrack which is being handled by the RTCRtpSender.
          If track is null, the RTCRtpSender doesn't transmit anything. *)
      method track : mediaStreamTrack Js.t Js.opt Js.readonly_prop

      (* FIXME add type *)
      (** The RTCDtlsTransport over which media data for the track is being
          transmitted. The data is transmitted using RTP packets. Before the
          transport is established, this value is null. *)
      method transport : 'a Js.t Js.opt Js.readonly_prop

      (* Methods *)

      (** Returns a RTCRtpParameters object describing the current configuration
          for the encoding and transmission of media on the track. *)
      method getParameters : _RTCRtpParameters Js.t Js.meth

      (* FIXME add type *)
      (** Returns a Promise which is fulfilled with a RTCStatsReport which
          provides statistics data for all outbound streams being sent using
          this RTCRtpSender. *)
      method getStats : 'a Js.t Js.meth

      (** Applies changes to parameters which configure how the track is encoded
          and transmitted to the remote peer. *)
      method setParameters : _RTCRtpParameters Js.t -> unit Js.meth
      method setParameters_void : unit Js.meth

      (** Attempts to replace the track currently being sent by the RTCRtpSender
          with another track, without performing renegotiation. This method can
          be used, for example, to toggle between the front- and rear-facing
          cameras on a device. *)
      method replaceTrack : mediaStreamTrack Js.t Js.opt ->
                            (unit, exn) promise Js.meth
      method replaceTrack_void : (unit, exn) promise Js.meth

    end

  and _RTCRtpParameters =
    object

      (** A sequence containing the codecs that an RTCRtpSender will choose
          from in order to send media. *)
      method codecs : _RTCRtpCodecParameters Js.t Js.js_array Js.t Js.prop

      (** When bandwidth is constrained and the RtpSender needs to choose
          between degrading resolution or degrading framerate,
          degradationPreference indicates which is preferred. *)
      method degradationPreference : Js.js_string Js.t Js.prop

      (** A sequence containing parameters for RTP encodings of media. *)
      method encodings : _RTCRtpEncodingParameters Js.t Js.js_array Js.t Js.prop

      (** A sequence containing parameters for RTP header extensions. *)
      method headerExtensions
             : _RTCRtpHeaderExtensionParameters Js.t Js.js_array Js.t Js.prop

      (** Parameters used for RTCP. *)
      method rtcp : _RTCRtcpParameters Js.t Js.prop

    end

  and _RTCRtpHeaderExtensionParameters =
    object

      (** Whether the header extension is encryted or not. *)
      method encrypted : bool Js.t Js.readonly_prop

      (** The value put in the RTP packet to identify the header extension. *)
      method id : int Js.readonly_prop

      (** The URI of the RTP header extension, as defined in RFC5285. *)
      method uri : Js.js_string Js.t Js.readonly_prop

    end

  and _RTCRtcpParameters =
    object

      (** The Canonical Name (CNAME) used by RTCP (e.g. in SDES messages) *)
      method cname : Js.js_string Js.t Js.readonly_prop

      (** Whether reduced size RTCP [RFC5506] is configured (if true)
          or compound RTCP as specified in RFC3550 *)
      method reducedSize : bool Js.t Js.readonly_prop

    end

  and _RTCDTMFSender =
    object
      (* Properties *)

      (** A DOMString which contains the list of DTMF tones currently in the
          queue to be transmitted (tones which have already been played are no
          longer included in the string). See toneBuffer for details on the
          format of the tone buffer. *)
      method toneBuffer : Js.js_string Js.t Js.readonly_prop

      (* Methods *)

      (** Given a string describing a set of DTMF codes and, optionally,
          the duration of and inter-tone gap between the tones, insertDTMF()
          starts sending the specified tones. Calling insertDTMF() replaces
          any already-pending tones from the toneBuffer. You can abort sending
          queued tones by specifying an empty string ("") as the set of tones
          to play. *)
      method insertDTMF : Js.js_string Js.t -> unit Js.meth
      method insertDTMF_duration : Js.js_string Js.t -> int -> unit Js.meth
      method insertDTMF_gap : Js.js_string Js.t -> int -> int -> unit Js.meth

      (* Event handlers *)

      (** The tonechange event is sent to the RTCDTMFSender instance's
          ontonechange event handler to indicate that a tone has either started
          or stopped playing. *)
      method ontonechange
             : ('b Js.t, _RTCTrackEvent Js.t) Dom_html.event_listener
                 Js.writeonly_prop
    end

  (** The RTCDTMFToneChangeEvent interface represents events sent to indicate
      that DTMF tones have started or finished playing.
      This interface is used by the tonechange event. *)
  and _RTCDTMFToneChangeEvent =
    object
      inherit [_RTCDTMFSender] Dom.event

      (** A DOMString specifying the tone which has begun playing, or an empty
          string ("") if the previous tone has finished playing. *)
      method tone : Js.js_string Js.t Js.readonly_prop
    end

  and _RTCPeerConnectionIceEvent =
    object
      inherit [_RTCPeerConnection] Dom.event

      method candidate : _RTCIceCandidate Js.t Js.opt Js.readonly_prop
    end

  and _RTCTrackEvent =
    object
      inherit [_RTCPeerConnection] Dom.event

      (* TODO add type *)
      (** The RTCRtpReceiver used by the track that's been added
          to the RTCPeerConnection. *)
      method receiver : 'a Js.t Js.readonly_prop

      (** An array of MediaStream objects, each representing one of the media
          streams which comprise the track that was added to the connection.
          By default, the array is empty. *)
      method streams : mediaStream Js.t Js.js_array Js.t Js.readonly_prop

      (** The MediaStreamTrack which has been added to the connection. *)
      method track : mediaStreamTrack Js.t Js.readonly_prop

      (** The RTCRtpTransceiver being used by the new track. *)
      method transceiver : _RTCRtpTransceiver Js.t Js.readonly_prop
    end

  (** The WebRTC API's RTCIceCandidateInit dictionary, which contains the
      information needed to fundamentally describe an RTCIceCandidate.
      RTCIceCandidateInit is used when using new RTCIceCandidate() to create
      a new ICE candidate object. It's also used as the return value from the
      RTCIceCandidate.toJSON() method, and can be passed directly into
      RTCPeerConnection.addIceCandidate() to add a candidate to the peer
      connection. *)
  and _RTCIceCandidateInit =
    object

      (** The ICE candidate-attribute. If the candidate is an indicator that
          there are no further candidates (rather than representing a new
          candidate), this is the empty string (""). The default is the empty
          string. *)
      method candidate : Js.js_string Js.t Js.optdef_prop

      (** The identification tag of the media stream with which the candidate is
          associated, or null if there is no associated media stream.
          The default is null. *)
      method sdpMid : Js.js_string Js.t Js.opt Js.optdef_prop

      (** The zero-based index of the m-line within the SDP of the media
          description with which the candidate is associated, or null if
          no such associated exists. The default is null. *)
      method sdpMLineIndex : int Js.opt Js.optdef_prop

      (** A DOMString containing a string which uniquely identifies the remote
          peer. This string is generated by WebRTC at the beginning of the session,
          and at least 24 bits worth of the string contain random data.
          The string may be up to 256 characters long. This property has no default
          value and is not present unless set explicitly. *)
      method usernameFragment : Js.js_string Js.t Js.optdef_prop
    end

  and _RTCIceCandidate =
    object
      (** A DOMString representing the transport address for the candidate
          that can be used for connectivity checks. The format of this address
          is a candidate-attribute as defined in RFC 5245.
          This string is empty ("") if the RTCIceCandidate is an
          "end of candidates" indicator. *)
      method candidate : Js.js_string Js.t Js.readonly_prop

      (** A DOMString which indicates whether the candidate is an RTP or an
          RTCP candidate; its value is either "rtp" or "rtcp", and is derived
          from the  "component-id" field in the candidate a-line string.
          The permitted values are listed in the RTCIceComponent
          enumerated type. *)
      method component : Js.js_string Js.t Js.readonly_prop

      (** Returns a DOMString containing a unique identifier that is the same
          for any candidates of the same type, share the same base (the address
          from which the ICE agent sent the candidate), and come from the same
          STUN server. This is used to help optimize ICE performance while
          prioritizing and correlating candidates that appear on multiple
          RTCIceTransport objects. *)
      method foundation : Js.js_string Js.t Js.readonly_prop

      (** A DOMString containing the IP address of the candidate. *)
      method ip : Js.js_string Js.t Js.readonly_prop

      (** An integer value indicating the candidate's port number. *)
      method port : int Js.readonly_prop

      (** A long integer value indicating the candidate's priority. *)
      method priority : int Js.readonly_prop

      (** A string indicating whether the candidate's protocol is "tcp" or
          "udp". The string is one of those in the enumerated type
          RTCIceProtocol. *)
      method protocol : Js.js_string Js.t Js.readonly_prop

      (** If the candidate is derived from another candidate, relatedAddress
          is a DOMString containing that host candidate's IP address.
          For host candidates, this value is null. *)
      method relatedAddress : Js.js_string Js.t Js.opt Js.readonly_prop

      (** For a candidate that is derived from another, such as a relay or
          reflexive candidate, the relatedPort is a number indicating the port
          number of the candidate from which this candidate is derived.
          For host candidates, the relatedPort property is null. *)
      method relatedPort : int Js.opt Js.readonly_prop

      (** A DOMString specifying the candidate's media stream identification
          tag which uniquely identifies the media stream within the component
          with which the candidate is associated, or null if no such association
          exists. *)
      method sdpMid : Js.js_string Js.t Js.readonly_prop

      (** If not null, sdpMLineIndex indicates the zero-based index number of
          the media description (as defined in RFC 4566) in the SDP with which
          the candidate is associated. *)
      method sdpMLineIndex : int Js.opt Js.readonly_prop

      (** If protocol is "tcp", tcpType represents the type of TCP candidate.
          Otherwise, tcpType is null. *)
      method tcpType : Js.js_string Js.t Js.opt Js.readonly_prop

      (** A DOMString indicating the type of candidate as one of the strings
          from the RTCIceCandidateType enumerated type. *)
      method _type : Js.js_string Js.t Js.readonly_prop

      (** A DOMString containing a randomly-generated username fragment
          ("ice-ufrag") which ICE uses for message integrity along with
          a randomly-generated password ("ice-pwd"). You can use this string to
          verify generations of ICE generation; each generation of the same ICE
          process will use the same usernameFragment, even across ICE restarts.
       *)
      method usernameFragment : Js.js_string Js.t Js.readonly_prop

      (** Given the RTCIceCandidate's current configuration, toJSON() returns
          a DOMString containing a JSON representation of that configuration in
          the form of a RTCIceCandidateInit object. *)
      method toJSON : Js.js_string Js.t Js.meth

    end

  and _RTCSessionDescriptionInit =
    object

      (** DOMString sdp *)
      method _type : Js.js_string Js.t Js.prop

      (** The string representation of the SDP;
          if type is "rollback", this member is unused. *)
      method sdp : Js.js_string Js.t Js.optdef_prop

    end

  and _RTCSessionDescription =
    object
      (** An enum of type RTCSdpType describing the session description's
          type. *)
      method _type : Js.js_string Js.t Js.readonly_prop

      (** A DOMString containing the SDP describing the session.*)
      method sdp : Js.js_string Js.t Js.readonly_prop
    end

  (** The RTCDataChannel interface represents a network channel which can be
      used for bidirectional peer-to-peer transfers of arbitrary data.
      Every data channel is associated with an RTCPeerConnection, and each peer
      connection can have up to a theoretical maximum of 65,534 data channels
      (the actual limit may vary from browser to browser). *)
  and _RTCDataChannel =
    object
      (* Properties *)

      (** The property binaryType on the RTCDataChannel interface is a DOMString
          which specifies the type of JavaScript object which should be used to
          represent binary data received on the RTCDataChannel. Values allowed
          by the WebSocket.binaryType property are also permitted here: "blob"
          if Blob objects are being used or "arraybuffer" if ArrayBuffer objects
          are being used. The default is "blob". *)
      method binaryType : Js.js_string Js.t Js.prop

      (** The read-only RTCDataChannel property bufferedAmount returns the
          number of bytes of data currently queued to be sent over the data
          channel. *)
      method bufferedAmount : int Js.readonly_prop

      (** The RTCDataChannel property bufferedAmountLowThreshold is used to
          specify the number of bytes of buffered outgoing data that is
          considered "low." The default value is 0. *)
      method bufferedAmountLowtThreshold : int Js.prop

      (** The read-only RTCDataChannel property id returns an ID number
          (between 0 and 65,534) which uniquely identifies the
          RTCDataChannel. *)
      method id : int Js.readonly_prop

      (** The read-only RTCDataChannel property label returns a DOMString
          containing a name describing the data channel. These labels are not
          required to be unique. *)
      method label : Js.js_string Js.t Js.readonly_prop

      (** The read-only RTCDataChannel property maxPacketLifeTime returns
          the amount of time, in milliseconds, the browser is allowed to take
          to attempt to transmit a message, as set when the data channel was
          created, or null. *)
      method maxPacketLifeTime : int Js.opt Js.readonly_prop

      (** The read-only RTCDataChannel property maxRetransmits returns the
          maximum number of times the browser should try to retransmit a message
          before giving up, as set when the data channel was created, or null,
          which indicates that there is no maximum. *)
      method maxRetransmits : int Js.opt Js.readonly_prop

      (** The read-only RTCDataChannel property negotiated indicates whether
          the RTCDataChannel's connection was negotiated by the Web app (true)
          or by the WebRTC layer (false). The default is false. *)
      method negotiated : bool Js.t Js.readonly_prop

      (** The read-only RTCDataChannel property ordered indicates whether or
          not the data channel guarantees in-order delivery of messages;
          the default is true, which indicates that the data channel is indeed
          ordered. *)
      method ordered : bool Js.t Js.readonly_prop

      (** The read-only RTCDataChannel property protocol returns a DOMString
          containing the name of the subprotocol in use. If no protocol was
          specified when the data channel was created, then this property's
          value is "" (the empty string). *)
      method protocol : Js.js_string Js.t Js.readonly_prop

      (** The read-only RTCDataChannel property readyState returns an enum of
          type RTCDataChannelState which indicates the state of the data
          channel's underlying data connection. *)
      method readyState : Js.js_string Js.t Js.readonly_prop

      (* Methods *)

      (** The RTCDataChannel.close() method closes the RTCDataChannel.
          Either peer is permitted to call this method to initiate closure
          of the channel. *)
      method close : unit Js.meth

      (** The send() method of the RTCDataChannel interface sends data across
          the data channel to the remote peer. *)
      method send_blob : #File.blob Js.t -> unit Js.meth
      method send_string : Js.js_string Js.t -> unit Js.meth

    end

  and _RTCDataChannelInit =
    object
      (* See RTCDataChannel for description *)

      method ordered : bool Js.t Js.optdef_prop

      method maxPacketLifeTime : int Js.opt Js.optdef_prop

      method maxRetransmits : int Js.opt Js.optdef_prop

      method protocol : Js.js_string Js.t Js.optdef_prop

      method negotiated : bool Js.t Js.optdef_prop

      method id : int Js.optdef_prop

    end

  and mediaStream =
    object
      inherit Dom_html.eventTarget

      (* Properties *)

      (** A DOMString containing 36 characters denoting a universally
        unique identifier (UUID) for the object.*)
      method id : Js.js_string Js.t Js.prop

      (** A Boolean value that returns true if the MediaStream is active,
        or false otherwise. *)
      method active : bool Js.t Js.prop

      (* Event handlers *)

      (** An EventHandler containing the action to perform when an addtrack
        event is fired when a new MediaStreamTrack object is added. *)
      method onaddtrack
             : ('b Js.t, mediaStreamTrackEvent Js.t) Dom_html.event_listener
                 Js.writeonly_prop

      (** An EventHandler containing the action to perform when a removetrack
        event is fired when a  MediaStreamTrack object is removed from it. *)
      method onremovetrack
             : ('b Js.t, mediaStreamTrackEvent Js.t) Dom_html.event_listener
                 Js.writeonly_prop

      (* Methods *)

      (** Stores a copy of the MediaStreamTrack given as argument.
          If the track has already been added to the MediaStream object,
          nothing happens. *)
      method addTrack : mediaStreamTrack Js.t -> unit Js.meth

      (** Returns a clone of the MediaStream object.
          The clone will, however, have a unique value for id. *)
      method clone : mediaStream Js.t Js.meth

      (** Returns a list of the MediaStreamTrack objects stored in the
          MediaStream object that have their kind attribute set to "audio".
          The order is not defined, and may not only vary from one browser
          to another, but also from one call to another. *)
      method getAudioTracks : mediaStreamTrack Js.t Js.js_array Js.t Js.meth

      (** Returns the track whose ID corresponds to the one given in parameters,
          trackid. If no parameter is given, or if no track with that ID does
          exist, it returns null. If several tracks have the same ID,
          it returns the first one. *)
      method getTrackById : Js.js_string Js.t ->
                            mediaStreamTrack Js.t Js.opt Js.meth

      (** Returns a list of all MediaStreamTrack objects stored in the
          MediaStream object, regardless of the value of the kind attribute.
          The order is not defined, and may not only vary from one browser
          to another, but also from one call to another. *)
      method getTracks : mediaStreamTrack Js.t Js.js_array Js.t Js.meth

      (** Returns a list of the MediaStreamTrack objects stored in the
          MediaStream object that have their kind attribute set to "video".
          The order is not defined, and may not only vary from one browser
          to another, but also from one call to another. *)
      method getVideoTracks : mediaStreamTrack Js.t Js.js_array Js.t Js.meth

      (** Removes the MediaStreamTrack given as argument.
          If the track is not part of the MediaStream object,
          nothing happens. *)
      method removeTrack : mediaStreamTrack Js.t -> unit Js.meth

    end

  and mediaStreamTrackEvent =
    object

      inherit [mediaStream Js.t] Dom.event

      method track : mediaStreamTrack Js.t Js.readonly_prop

    end

  and mediaStreamTrack =
    object

      (** Returns a DOMString containing a unique identifier (GUID)
          for the track; it is generated by the browser. *)
      method id : Js.js_string Js.t Js.readonly_prop

      (** A Boolean whose value of true if the track is enabled,
          that is allowed to render the media source stream;
          or false if it is disabled, that is not rendering the media source
          stream but silence and blackness. If the track has been disconnected,
          this value can be changed but has no more effect. *)
      method enabled : bool Js.t Js.prop

      (** A string that may be used by the web application to provide
          a hint as to what type of content the track contains to guide
          how it should be treated by API consumers. *)
      method contentHint : Js.js_string Js.t Js.prop

      (** Returns a Boolean value which is true if the track is isolated;
          that is, the track cannot be accessed by the document that owns
          the MediaStreamTrack. This happens when the peerIdentity property
          is set, or if the track comes from a cross-origin source. *)
      method isolated : bool Js.t Js.readonly_prop

      (** Returns a DOMString set to "audio" if the track is an audio track
          and to "video", if it is a video track. It doesn't change if the
          track is deassociated from its source. *)
      method kind : Js.js_string Js.t Js.readonly_prop

      (** Returns a DOMString containing a user agent-assigned label that
          identifies the track source, as in "internal microphone". The string
          may be left empty and is empty as long as no source has been
          connected. When the track is deassociated from its source, the label
          is not changed. *)
      method label : Js.js_string Js.t Js.readonly_prop

      (** Returns a Boolean value indicating whether the track is unable to
          provide media data due to a technical issue. *)
      method muted : bool Js.t Js.readonly_prop

      (** Returns a Boolean value with a value of true if the track is
          readonly (such a video file source or a camera that settings can't
          be modified), false otherwise. *)
      method readonly : bool Js.t Js.readonly_prop

      (** Returns an enumerated value giving the status of the track.
          This will be one of the following values:

          "live" which indicates that an input is connected and does
          its best-effort in providing real-time data. In that case, the
          output of data can be switched on or off using the enabled attribute.

          "ended" which indicates that the input is not giving any more data and
          will never provide new data.*)
      method readyState : Js.js_string Js.t Js.readonly_prop

      method applyConstraints : mediaTrackConstraints Js.t -> unit Js.meth

      method clone : mediaStreamTrack Js.t Js.meth

      method getCapabilities : unit Js.meth

      method getConstraints : mediaTrackConstraints Js.t Js.meth

      method getSettings : mediaTrackSettings Js.t Js.meth

      method stop : unit Js.meth

      (* Event handlers *)

      method onended
             : ('b Js.t, mediaStreamTrack Dom.event Js.t) Dom_html.event_listener
                 Js.writeonly_prop

    end

  and mediaTrackSettings =
    object

      (** A DOMString indicating the current value of the deviceId property.
          The device ID is a origin-unique string identifying the source of
          the track; this is usually a GUID. This value is specific to the
          source of the track's data and is not usable for setting constraints;
          it can, however, be used for initially selecting media when calling
          MediaDevices.getUserMedia(). *)
      method deviceId : Js.js_string Js.t Js.prop

      (** A DOMString indicating the current value of the groupId property.
          The group ID is a browsing session-unique string identifying the
          source group of the track. Two devices (as identified by the deviceId)
          are considered part of the same group if they are from the same
          physical device. For instance, the audio input and output devices for
          the speaker and microphone built into a phone would share the same
          group ID, since they're part of the same physical device.
          The microphone on a headset would have a different ID, though.
          This value is specific to the source of the track's data and is not
          usable for setting constraints; it can, however, be used for initially
          selecting media when calling MediaDevices.getUserMedia(). *)
      method groupId : Js.js_string Js.t Js.prop

      (* AUDIO *)

      (** A Boolean which indicates the current value of the autoGainControl
          property, which is true if automatic gain control is enabled and is
          false otherwise. *)
      method audioGainControl : bool Js.t Js.prop

      (** A long integer value indicating the current value of the channelCount
          property, specifying the number of audio channels present on the track
          (therefore indicating how many audio samples exist in each audio
          frame). This is 1 for mono, 2 for stereo, and so forth. *)
      method channelCount : int Js.t Js.prop

      (** A Boolean indicating the current value of the echoCancellation
          property, specifying true if echo cancellation is enabled,
          otherwise false. *)
      method echoCancellation : bool Js.t Js.prop

      (** A double-precision floating point value indicating the current
          value of the latency property, specifying the audio latency,
          in seconds. Latency is the amount of time which elapses between
          the start of processing the audio and the data being available to
          the next stop in the audio utilization process.
          This value is a target value; actual latency may vary to some extent
          for various reasons. *)
      method latency : float Js.t Js.prop

      (** A Boolean which indicates the current value of the noiseSupression
          property, which is true if noise suppression is enabled and is false
          otherwise. *)
      method noiseSuppression : bool Js.t Js.prop

      (** A long integer value indicating the current value of the sampleRate
          property, specifying the sample rate in samples per second of the
          audio data. Standard CD-quality audio, for example, has a sample rate
          of 41,000 samples per second. *)
      method sampleRate : int Js.t Js.prop

      (** A long integer value indicating the current value of the sampleSize
          property, specifying the linear size, in bits, of each audio sample.
          CD-quality audio, for example, is 16-bit, so this value would be 16
          in that case. *)
      method sampleSize : int Js.t Js.prop

      (** A double-precision floating point value indicating the current value
          of the volume property, specifying the volume level of the track.
          This value will be between 0.0 (silent) to 1.0
          (maximum supported volume). *)
      method volume : float Js.t Js.prop

      (* VIDEO *)

      (** A double-precision floating point value indicating the current value
          of the aspectRatio property, specified precisely to 10 decimal places.
          This is the width of the image in pixels divided by its height in
          pixels. Common values include 1.3333333333 (for the classic televison
          4:3 "standard" aspect ratio, also used on tablets such as Apple's
          iPad), 1.7777777778 (for the 16:9 high-definition widescreen aspect
          ratio), and 1.6 (for the 16:10 aspect ratio common among widescreen
          computers and tablets). *)
      method aspectRatio : float Js.t Js.prop

      (** A DOMString indicating the current value of the facingMode property,
          specifying the direction the camera is facing. The value will be one
          of:
          - "user"
          A camera facing the user (commonly known as a "selfie cam"), used for
          self-portraiture and video calling.
          - "environment"
          A camera facing away from the user (when the user is looking at the
          screen). This is typically the highest quality camera on the device,
          used for general photography.
          - "left"
          A camera facing toward the environment to the user's left.
          - "right"
          A camera facing toward the environment to the user's right. *)
      method facingMode : Js.js_string Js.t Js.prop

      (** A double-precision floating point value indicating the current
          value of the frameRate property, specifying how many frames of
          video per second the track includes. If the value can't be determined
          for any reason, the value will match the vertical sync rate of the
          device the user agent is running on. *)
      method frameRate : float Js.t Js.prop

      (** A long integer value indicating the current value of the height
          property, specifying the height of the track's video data in
          pixels. *)
      method height : int Js.t Js.prop

      (** A long integer value indicating the current value of the width
          property, specifying the width of the track's video data in pixels. *)
      method width : int Js.t Js.prop

      (** A DOMString indicating the current value of the resizeMode property,
          specifying the mode used by the user agent to derive the resolution
          of the track. The value will be one of:
          - "none"
          The track has the resolution offered by the camera, its driver or
          the OS.
          - "crop-and-scale"
          The track's resolution might be the result of the user agent using
          cropping or downscaling from a higher camera resolution. *)
      method resizeMode : Js.js_string Js.t Js.prop

      (* SHARED SCREEN TRACKS *)

      (** A DOMString which indicates whether or not the mouse cursor is being
          included in the generated stream and under what conditions.
          Possible values are:
          - always
          The mouse is always visible in the video content of the
          {domxref("MediaStream"), unless the mouse has moved outside the area
          of the content.
          - motion
          The mouse cursor is always included in the video if it's moving, and
          for a short time after it stops moving.
          - never
          The mouse cursor is never included in the shared video. *)
      method cursor : Js.js_string Js.t Js.prop

      (** A DOMString which specifies the type of source the track contains;
          one of:
          - application
          The stream contains all of the windows of the application chosen
          by the user rendered into the one video track.
          - browser
          The stream contains the contents of a single browser tab selected
          by the user.
          - monitor
          The stream's video track contains the entire contents of one or
          more of the user's screens.
          - window
          The stream contains a single window selected by the user for
          sharing. *)
      method displaySurface : Js.js_string Js.t Js.prop

      (** A Boolean value which, if true, indicates that the video contained in
          the stream's video track contains a background rendering context,
          rather than a user-visible one. This is false if the video being
          captured is coming from a foreground (user-visible) source. *)
      method logicalSurface : bool Js.t Js.prop

    end

  and mediaTrackConstraints =
    object

      (* Properties of all media tracks *)

      (** A ConstrainDOMString object specifying a device ID or an array of
          device IDs which are acceptable and/or required. *)
      method deviceId : Constrain.String.t Js.t Js.optdef_prop

      (** A ConstrainDOMString object specifying a group ID or an array of
          group IDs which are acceptable and/or required. *)
      method groupId : Constrain.String.t Js.t Js.optdef_prop

      (* Properties of audio tracks *)

      (** A ConstrainBoolean object which specifies whether automatic gain
          control is preferred and/or required. *)
      method autoGainControl : Constrain.Bool.t Js.t Js.optdef_prop

      (** A ConstrainLong specifying the channel count or range of channel
          counts which are acceptable and/or required. *)
      method channelCount : Constrain.Long.t Js.t Js.optdef_prop

      (** A ConstrainBoolean object specifying whether or not echo cancellation
          is preferred and/or required. *)
      method echoCancellation : Constrain.Bool.t Js.t Js.optdef_prop

      (** A ConstrainDouble specifying the latency or range of latencies which
          are acceptable and/or required. *)
      method latency : Constrain.Double.t Js.t Js.optdef_prop

      (** A ConstrainBoolean which specifies whether noise suppression is
          preferred and/or required. *)
      method noiseSuppression : Constrain.Bool.t Js.t Js.optdef_prop

      (** A ConstrainLong specifying the sample rate or range of sample rates
          which are acceptable and/or required. *)
      method sampleRate : Constrain.Long.t Js.t Js.optdef_prop

      (** A ConstrainLong specifying the sample size or range of sample sizes
          which are acceptable and/or required. *)
      method sampleSize : Constrain.Long.t Js.t Js.optdef_prop

      (** A ConstrainDouble specifying the volume or range of volumes which are
          acceptable and/or required. *)
      method volume : Constrain.Double.t Js.t Js.optdef_prop

      (* Properties of image tracks *)

      (** A String specifying one of "none", "manual", "single-shot",
          or "continuous". *)
      method whiteBalanceMode : Js.js_string Js.t Js.optdef_prop

      (** A String specifying one of "none", "manual", "single-shot",
          or "continuous". *)
      method exposureMode : Js.js_string Js.t Js.optdef_prop

      (** A String specifying one of "none", "manual", "single-shot",
          or "continuous".*)
      method focusMode: Js.js_string Js.t Js.optdef_prop

      (** The pixel coordinates on the sensor of one or more points of interest.
          This is either an object in the form { x:value, y:value } or an array
          of such objects, where value  is a double-precision integer. *)
      method pointsOfInterest : point Js.t or_array Js.t Js.optdef_prop

      (** A ConstrainDouble (a double-precision integer) specifying f-stop
          adjustment by up to ±3. *)
      method exposureCompensation : Constrain.Double.t Js.t Js.optdef_prop

      (** A ConstrainDouble (a double-precision integer) specifying a desired
          color temperature in degrees kelvin. *)
      method colorTemperature : Constrain.Double.t Js.t Js.optdef_prop

      (** A ConstrainDouble (a double-precision integer) specifying a desired
          iso setting. *)
      method iso : Constrain.Double.t Js.t Js.optdef_prop

      (** A ConstrainDouble (a double-precision integer) specifying a desired
          brightness setting. *)
      method brightness : Constrain.Double.t Js.t Js.optdef_prop

      (** A ConstrainDouble (a double-precision integer) specifying the degree
          of difference between light and dark. *)
      method contrast : Constrain.Double.t Js.t Js.optdef_prop

      (** A ConstrainDouble (a double-precision integer) specifying the degree
          of color intensity. *)
      method saturation : Constrain.Double.t Js.t Js.optdef_prop

      (** A ConstrainDouble (a double-precision integer) specifying the
          intensity of edges. *)
      method sharpness : Constrain.Double.t Js.t Js.optdef_prop

      (** A ConstrainDouble (a double-precision integer) specifying distance
          to a focused object. *)
      method focusDistance : Constrain.Double.t Js.t Js.optdef_prop

      (** A ConstrainDouble (a double-precision integer) specifying the desired
          focal length. *)
      method zoom : Constrain.Double.t Js.t Js.optdef_prop

      (** A Boolean defining whether the fill light is continuously connected,
          meaning it stays on as long as the track is active. *)
      method torch : bool Js.t Js.optdef_prop

      (* Properties of video tracks *)

      (** A ConstrainDouble specifying the video aspect ratio or range of aspect
          ratios which are acceptable and/or required. *)
      method aspectRatio : Constrain.Double.t Js.t Js.optdef_prop

      (** A ConstrainDOMString object specifying a facing or an array of facings
          which are acceptable and/or required. *)
      method facingMode : Constrain.String.t Js.t Js.optdef_prop

      (** A ConstrainDouble specifying the frame rate or range of frame rates
          which are acceptable and/or required. *)
      method frameRate : Constrain.Double.t Js.t Js.optdef_prop

      (** A ConstrainLong specifying the video height or range of heights which
          are acceptable and/or required. *)
      method height : Constrain.Long.t Js.t Js.optdef_prop

      (** A ConstrainLong specifying the video width or range of widths which
          are acceptable and/or required. *)
      method width : Constrain.Long.t Js.t Js.optdef_prop

      (** A ConstrainDOMString object specifying a mode or an array of modes
          the UA can use to derive the resolution of a video track.
          Allowed values are none and crop-and-scale. none means that the user
          agent uses the resolution provided by the camera, its driver or
          the OS. crop-and-scale means that the user agent can use cropping and
          downscaling on the camera output  in order to satisfy other
          constraints that affect the resolution. *)
      method resizeMode : Constrain.String.t Js.t Js.optdef_prop

      (* Properties of shared screen tracks *)

      (** A ConstrainDOMString which specifies whether or not to include
          the mouse cursor in the generated track, and if so, whether or not
          to hide it while not moving. The value may be a single one of the
          following strings, or an array of them to allow the browser
          flexibility in deciding what to do about the cursor.
          - always
          The mouse is always visible in the video content of the
          {domxref("MediaStream"), unless the mouse has moved outside the area
          of the content.
          - motion
          The mouse cursor is always included in the video if it's moving,
          and for a short time after it stops moving.
          - never
          The mouse cursor is never included in the shared video. *)
      method cursor : Constrain.String.t Js.t Js.optdef_prop

      (** A ConstrainDOMString which specifies the types of display surface
          that may be selected by the user. This may be a single one of the
          following strings, or a list of them to allow multiple source
          surfaces:
          - application
          The stream contains all of the windows of the application chosen by
          the user rendered into the one video track.
          - browser
          The stream contains the contents of a single browser tab selected by
          the user.
          - monitor
          The stream's video track contains the entire contents of one or more
          of the user's screens.
          - window
          The stream contains a single window selected by the user for
          sharing. *)
      method displaySurface : Constrain.String.t Js.t Js.optdef_prop

      (** A ConstrainBoolean value which may contain a single Boolean value
          or a set of them, indicating whether or not to allow the user to
          choose source surfaces which do not directly correspond to display
          areas. These may include backing buffers for windows to allow capture
          of window contents that are hidden by other windows in front of them,
          or buffers containing larger documents that need to be scrolled
          through to see the entire contents in their windows. *)
      method logicalSurface : Constrain.Bool.t Js.t Js.optdef_prop

    end

  (** The RTCIceServer dictionary defines how to connect to a single ICE server
      (such as a STUN or TURN server). It includes both the URL and
      the necessary credentials, if any, to connect to the server. *)
  and _RTCIceServer =
    object

      method credential : Js.js_string Js.t Js.optdef_prop

      method credentialType : Js.js_string Js.t Js.optdef_prop

      method urls : Js.js_string Js.t Js.optdef_prop

      method urls_ : Js.js_string Js.t Js.js_array Js.t Js.optdef_prop

      method username : Js.js_string Js.t Js.optdef_prop
    end

  (** An RTCConfiguration dictionary providing options
      to configure the new connection. *)
  and _RTCConfiguration =
    object

      (** Specifies how to handle negotiation of candidates when the remote
          peer is not compatible with the SDP BUNDLE standard. This must be one
          of the values from the enum RTCBundlePolicy. If this value isn't
          included in the dictionary, "balanced" is assumed. *)
      method bundlePolicy : Js.js_string Js.t Js.optdef_prop

      (** An Array of objects of type RTCCertificate which are used by the
          connection for authentication. If this property isn't specified,
          a set of certificates is generated automatically for each
          RTCPeerConnection instance. Although only one certificate is used by
          a given connection, providing certificates for multiple algorithms may
          improve the odds of successfully connecting in some circumstances.
          See Using certificates below for additional information. *)
      method certificates : 'a Js.t Js.js_array Js.t Js.optdef_prop

      (** An unsigned 16-bit integer value which specifies the size of the
          prefetched ICE candidate pool. The default value is 0 (meaning no
          candidate prefetching will occur). You may find in some cases that
          connections can be established more quickly by allowing the ICE agent
          to start fetching ICE candidates before you start trying to connect,
          so that they're already available for inspection when
          RTCPeerConnection.setLocalDescription() is called. *)
      method iceCandidatePoolSize : int Js.optdef_prop

      (** An array of RTCIceServer objects, each describing one server which
          may be used by the ICE agent; these are typically STUN and/or TURN
          servers. If this isn't specified, the ICE agent may choose to use
          its own ICE servers; otherwise, the connection attempt will be made
          with no STUN or TURN server available, which limits the connection
          to local peers. *)
      method iceServers : _RTCIceServer Js.t Js.js_array Js.t Js.optdef_prop

      (** The current ICE transport policy; this must be one of the values
          from the RTCIceTransportPolicy enum. If this isn't specified,
          "all" is assumed. *)
      method iceTransportPolicy : Js.js_string Js.t Js.optdef_prop

      (** A DOMString which specifies the target peer identity for the
          RTCPeerConnection. If this value is set (it defaults to null),
          the RTCPeerConnection will not connect to a remote peer unless
          it can successfully authenticate with the given name. *)
      method peerIdentity : Js.js_string Js.t Js.optdef_prop

      (** The RTCP mux policy to use when gathering ICE candidates, in order
          to support non-multiplexed RTCP. The value must be one of those from
          the RTCRtcpMuxPolicy enum. The default is "require". *)
      method rtcpMuxPolicy : Js.js_string Js.t Js.optdef_prop

    end

type bool_or_constraints

let wrap_bool (x : bool) : bool_or_constraints Js.t =
  Js.Unsafe.coerce (Js.bool x)

let wrap_constraints (x : mediaTrackConstraints Js.t) :
      bool_or_constraints Js.t =
  Js.Unsafe.coerce x

let cast_bool (x : bool_or_constraints Js.t) : bool Js.t Js.opt =
  if Js.typeof x == Js.typeof Js._true
  then Js.some (Js.Unsafe.coerce x)
  else Js.null

let cast_constraints (x : bool_or_constraints Js.t) :
      mediaTrackConstraints Js.t Js.opt =
  if String.equal (Js.to_string @@ Js.typeof x) "object"
  then Js.some (Js.Unsafe.coerce x)
  else Js.null

class type mediaDevices =
  object

    (* Properties *)

    (** The event handler for the devicechange event.
        This event is delivered to the MediaDevices object when a media input
        or output device is attached to or removed from the user's computer. *)
    method ondevicechange :
             ('b Js.t, mediaDevices Js.t Dom.event Js.t) Dom_html.event_listener
               Js.writeonly_prop

    (* Methods *)

    (** Obtains an array of information about the media input and output devices
        available on the system. *)
    method enumerateDevices :
             (mediaDeviceInfo Js.t Js.js_array Js.t, exn) promise Js.meth

    (** Returns an object conforming to MediaTrackSupportedConstraints
        indicating which constrainable properties are supported on the
        MediaStreamTrack interface. See Capabilities and constraints in
        Media Capture and Streams API (Media Stream) to learn more about
        constraints and how to use them. *)
    method getSupportedConstraints : mediaTrackSupportedConstraints Js.t Js.meth

    (** Prompts the user to select a display or portion of a display
        (such as a window) to capture as a MediaStream for sharing or recording
        purposes.  Returns a promise that resolves to a MediaStream. *)
    method getDisplayMedia :
             mediaStreamConstraints Js.t ->
             (mediaStream Js.t, exn) promise Js.meth
    method getDisplayMedia_ : (mediaStream Js.t, exn) promise Js.t Js.meth

    (** With the user's permission through a prompt, turns on a camera and/or
        a microphone on the system and provides a MediaStream containing a video
        track and/or an audio track with the input. *)
    method getUserMedia :
             mediaStreamConstraints Js.t ->
             (mediaStream Js.t, exn) promise Js.meth
    method getUserMedia_ : (mediaStream Js.t, exn) promise Js.meth

  end

  and mediaStreamConstraints =
    object

      (* Properties *)

      (** Either a Boolean (which indicates whether or not an audio track
          is requested) or a MediaTrackConstraints object providing the
          constraints which must be met by the audio track included in the
          returned MediaStream. If constraints are specified, an audio track
          is inherently requested. *)
      method audio : bool_or_constraints Js.t Js.optdef_prop

      (** Either a Boolean (which indicates whether or not a video track
          is requested) or a MediaTrackConstraints object providing the
          constraints which must be met by the video track included in the
          returned MediaStream. If constraints are specified, a video track
          is inherently requested. *)
      method video : bool_or_constraints Js.t Js.optdef_prop

      (** A DOMString identifying the peer who has sole access to the stream.
          If this property is specified, only the indicated peer can receive
          and use the stream. Streams isolated in this way can only be displayed
          in a media element (<audio> or <video>) where the content is protected
          just as if CORS cross-origin rules were in effect. When a peer
          identity is set, MediaStreamTracks from that peer have their isolated
          flag set to true. *)
      method peerIdentity : Js.js_string Js.t Js.optdef_prop

    end

  and mediaDeviceInfo =
    object

      (* Properties *)

      (** Returns a DOMString that is an identifier for the represented device
          that is persisted across sessions. It is un-guessable by other
          applications and unique to the origin of the calling application.
          It is reset when the user clears cookies (for Private Browsing,
          a different identifier is used that is not persisted across
          sessions). *)
      method deviceId : Js.js_string Js.t Js.readonly_prop

      (** Returns a DOMString that is a group identifier. Two devices have the
          same group identifier if they belong to the same physical device — for
          example a monitor with both a built-in camera and a microphone. *)
      method groupId : Js.js_string Js.t Js.readonly_prop

      (** Returns an enumerated value that is either "videoinput",
          "audioinput" or "audiooutput". *)
      method kind : Js.js_string Js.t Js.readonly_prop

      (** Returns a DOMString that is a label describing this device
          (for example "External USB Webcam"). *)
      method label : Js.js_string Js.t Js.readonly_prop

    end

  and mediaTrackSupportedConstraints =
    object

      method autoGainControl : bool Js.t Js.optdef_prop

      method width : bool Js.t Js.optdef_prop

      method height : bool Js.t Js.optdef_prop

      method aspectRatio : bool Js.t Js.optdef_prop

      method frameRate : bool Js.t Js.optdef_prop

      method facingMode : bool Js.t Js.optdef_prop

      method resizeMode : bool Js.t Js.optdef_prop

      method volume : bool Js.t Js.optdef_prop

      method sampleRate : bool Js.t Js.optdef_prop

      method sampleSize : bool Js.t Js.optdef_prop

      method echoCancellation : bool Js.t Js.optdef_prop

      method latency : bool Js.t Js.optdef_prop

      method noiseSuppression : bool Js.t Js.optdef_prop

      method channelCount : bool Js.t Js.optdef_prop

      method deviceId : bool Js.t Js.optdef_prop

      method groupId : bool Js.t Js.optdef_prop

      (* Properties specific to shared screen tracks *)

      method cursor : bool Js.t Js.optdef_prop

      method displaySurface : bool Js.t Js.optdef_prop

      method logicalSurface : bool Js.t Js.optdef_prop

    end
